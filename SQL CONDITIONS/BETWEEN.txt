****** SQL условие BETWEEN ******

SQL условие BETWEEN позволяет легко проверить, находится ли выражение в диапазоне 
значений (включительно). Его можно использовать в операторе SELECT, INSERT, UPDATE 
или DELETE.

Синтаксис для условия BETWEEN в SQL:

***************************************************************************************
expression BETWEEN value1 AND value2;
***************************************************************************************

Параметры:
- expression - cтолбец или расчет.
- value1 и value2 - эти значения создают инклюзивный диапазон, с которым сравнивается expression.

!!! ВНИМАНИЕ !!!
Условие SQL BETWEEN будет возвращать записи, где выражение находится в диапазоне значений 
value1 и value2 (включительно).
!!! ВНИМАНИЕ !!!

****** Использование условия BETWEEN с числовыми значениями ******

У нас есть таблица suppliers со следующими полями: supplier_id, supplier_name, 
                                                   city, state.
Формируем MySQL запрос:

***************************************************************************************
SELECT *
FROM suppliers
WHERE supplier_id BETWEEN 300 AND 600;
***************************************************************************************

В этом примере возвращаются все строки из таблицы suppliers, где supplier_id находится в 
диапазоне от 300 до 600 (включительно). 

Такой запрос эквивалентен запросу SELECT в PgSQL:

***************************************************************************************
SELECT *
FROM suppliers
WHERE supplier_id >= 300
AND supplier_id <= 600;
***************************************************************************************

****** Использование условия BETWEEN со значениями даты ******

Даты могут быть несколько сложными в SQL, и то, как мы используем условие BETWEEN с датами, 
зависит от базы данных, которую мы используем (т.е. Oracle, SQL Server, MySQL и т.д.). 

Приведем пример для каждой из основных технологий баз данных. У нас есть таблица orders 
и следующими полями: order_id, customer_id, order_date. 

SQL запрос, в зависимости от базы данных, которую мы используем:

****************************** PgSQL **************************************************
SELECT *
FROM orders
WHERE order_date BETWEEN '2019/06/19' AND '2019/07/01';
****************************** PgSQL **************************************************

Для Oracle (используйте функцию TO_DATE):

****************************** Transact-SQL *******************************************
SELECT *
FROM orders
WHERE order_date BETWEEN TO_DATE ('19.06.2019', 'dd.mm.yyyy')
AND TO_DATE ('01.07.2019', 'dd.mm.yyyy');
****************************** Transact-SQL *******************************************

Для MySQL и MariaDB (используйте функцию CAST):

****************************** MySQL и MariaDB ****************************************
SELECT *
FROM orders
WHERE order_date BETWEEN CAST('2019/06/19' AS DATE) AND CAST('2019/07/01' AS DATE);
****************************** MySQL и MariaDB ****************************************

В этом примере будут возвращены все записи из таблицы orders, где значение order_date 
находится между 19 июня 2019 г. и 1 июля 2019 г. (включительно).

****** Использование оператора NOT с условием BETWEEN ******

Условие BETWEEN может использоваться с оператором NOT для создания условия NOT BETWEEN. 
Пример, который показывает, как использовать условие NOT BETWEEN в запросе. У нас есть 
таблица customer, содержащая следующие поля: customer_id, first_name, 
                                             last_name, favorite_website.

***************************************************************************************
SELECT *
FROM customers
WHERE customer_id NOT BETWEEN 5000 AND 8000;
***************************************************************************************

Это запрос вернет все строки, где customer_id НЕ находится в диапазоне между 5000 и 8000 
включительно. Такой запрос эквивалентен следующему запросу SELECT:

***************************************************************************************
SELECT *
FROM customers
WHERE customer_id < 5000
OR customer_id > 8000;
***************************************************************************************