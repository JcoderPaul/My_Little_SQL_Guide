****** SUBQUERYS подзапросы MySQL ******

В MySQL подзапрос представляет собой запрос в запросе. Мы можем создавать 
подзапросы в своих основных запросах SQL. Эти подзапросы могут находиться 
в операторе WHERE, в операторе FROM или в операторе SELECT.

!!! ВНИМАНИЕ !!!
В MySQL подзапрос также называется INNER QUERY или INNER SELECT.
В MySQL основной запрос, который содержит подзапрос, также называется 
OUTER QUERY или OUTER SELECT.
!!! ВНИМАНИЕ !!!

****** SUBQUERYS с оператором WHERE ******

Чаще всего подзапросы делают в операторе WHERE. Эти подзапросы также 
называются вложенными подзапросами.

Например:

************************************************************************************
SELECT c.contact_id, c.last_name
FROM contacts c
WHERE c.site_name IN
     (SELECT a.site_name
      FROM address_book a
      WHERE a.address_book_id < 50);
************************************************************************************

В данном случае подзапрос, содержится в предложении оператора SELECT:

************************************************************************************
(SELECT a.site_name
 FROM address_book a
 WHERE a.address_book_id < 50);
************************************************************************************

Т.е. сначала мы формируем подзапрос, который позволяет найти все значения поля 
site_name из таблицы address_book, у которого address_book_id менее 50. 

Затем этот же подзапрос используется для фильтрации результатов основного запроса 
с использованием условия IN.

Этот подзапрос может быть альтернативно записан как INNER-соединение:

************************************************************************************
SELECT c.contact_id, c.last_name
FROM contacts c
INNER JOIN address_book a
ON c.site_name = a.site_name
WHERE a.address_book_id < 50;
************************************************************************************

Данный INNER JOIN будет работать более эффективно, чем исходный подзапрос. 
Важно отметить, однако, что не все подзапросы могут быть переписаны с помощью объединений.

****** SUBQUERYS с оператором FROM ******

Подзапрос также можно применить в операторе FROM. 
Они называются встроенными представлениями (views).

Пример:

************************************************************************************
SELECT contacts.last_name, subquery1.total_size
FROM contacts,
    (SELECT site_name, SUM(file_size) AS total_size
     FROM pages
     GROUP BY site_name) subquery1
WHERE subquery1.site_name = contacts.site_name;
************************************************************************************

В этом примере мы создали подзапрос в операторе FROM следующим образом:

************************************************************************************
(SELECT site_name, SUM(file_size) AS total_size
FROM pages
GROUP BY site_name) subquery1
************************************************************************************

Данный подзапрос имеет псевдоним с именем subquery1. Это будет имя, используемое для 
ссылки на этот подзапрос или любое из его полей.

****** SUBQUERYS с оператором SELECT ******

Подзапрос можно поместить в оператор SELECT. Они обычно используются, когда мы хотим 
получить расчет с использованием агрегатной функции, такой как функции: SUM, COUNT, MIN, 
MAX или AVG, но мы не хотим, чтобы агрегированная функция применялась к основному запросу.

Пример:

************************************************************************************
SELECT p1.site_name,
  (SELECT MAX(file_size)
   FROM pages p2
   WHERE p1.site_id = p2.site_id) subquery2
FROM pages p1;
************************************************************************************

В этом примере мы создали подзапрос в запросе SELECT следующим образом:

************************************************************************************
(SELECT MAX(file_size)
 FROM pages p2
 WHERE p1.site_id = p2.site_id) subquery2
************************************************************************************

Подзапрос имеет псевдоним с именем subquery2. Это будет имя, используемое для ссылки 
на этот подзапрос или любое из его полей.

Трюк для размещения подзапроса внутри SELECT заключается в том, что подзапрос должен 
возвращать одно значение. Вот почему в подзапросе используется общая функция, такая 
как функция SUM, COUNT, MIN, MAX или AVG.